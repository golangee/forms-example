//go:generate go run main.go
package main

import (
	"bytes"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/golangee/forms-example/www/internal/index"
	"github.com/golangee/i18n"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	// invoke the generator in your current project. It will process the entire module.
	if err := i18n.Bundle(); err != nil {
		panic(err)
	}

	if err := createTutorialDetails(); err != nil {
		panic(err)
	}
}

func createTutorialDetails() error {

	dir, err := os.Getwd()
	if err != nil {
		return err
	}

	dir, err = modRoot(dir)
	if err != nil {
		return err
	}

	modDir := dir
	dir = filepath.Join(dir, "internal", "tutorial")
	files, err := ioutil.ReadDir(dir)
	if err != nil {
		return err
	}

	tutIndex := &index.TutorialIndex{}
	for _, file := range files {
		if !file.IsDir() {
			continue
		}

		srcFile := filepath.Join(dir, file.Name(), "component.go")
		src, err := ioutil.ReadFile(srcFile)
		if err != nil {
			return err
		}

		_ = src
		fmt.Println("read " + srcFile)

		tutorialDoc := &strings.Builder{}
		sourceCode := &strings.Builder{}
		path := "/tutorial/" + file.Name()

		stillDoc := true
		for _, line := range strings.Split(string(src), "\n") {
			trimLine := strings.TrimSpace(line)
			if stillDoc {
				if strings.HasPrefix(trimLine, "package") {
					stillDoc = false
					sourceCode.WriteString(trimLine)
					sourceCode.WriteString("\n")
					continue
				}

				tutorialDoc.WriteString(strings.TrimSpace(line[2:]))
				tutorialDoc.WriteString(" ")
			} else {
				sourceCode.WriteString(line)
				sourceCode.WriteString("\n")
			}
		}

		tutorial := index.Tutorial{
			Path: path,
			Doc:  tutorialDoc.String(),
			Code: sourceCode.String(),
		}

		tutIndex.Tutorials = append(tutIndex.Tutorials, tutorial)

	}

	buf, err := json.Marshal(tutIndex)
	if err != nil {
		return err
	}

	baseEncoded := base64.StdEncoding.EncodeToString(buf)
	idxFile := filepath.Join(modDir, "internal", "index", "gen.go")
	genFile := &bytes.Buffer{}
	genFile.WriteString("//generated by forms-example generator\n\n")
	genFile.WriteString("package index\n")
	genFile.WriteString("const tutorials =\"" + baseEncoded + "\"\n")
	if err := ioutil.WriteFile(idxFile, genFile.Bytes(), os.ModePerm); err != nil {
		return err
	}

	return nil
}

func modRoot(dir string) (string, error) {
	if dir == "/" || dir == "" {
		return "", fmt.Errorf("no go.mod found")
	}

	if _, err := os.Stat(filepath.Join(dir, "go.mod")); err != nil {
		return modRoot(filepath.Dir(dir))
	}

	return dir, nil
}
